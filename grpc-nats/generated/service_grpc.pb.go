// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/service.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceOne_PublishMessage_FullMethodName = "/service.ServiceOne/PublishMessage"
)

// ServiceOneClient is the client API for ServiceOne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceOneClient interface {
	PublishMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceOneClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceOneClient(cc grpc.ClientConnInterface) ServiceOneClient {
	return &serviceOneClient{cc}
}

func (c *serviceOneClient) PublishMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceOne_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceOneServer is the server API for ServiceOne service.
// All implementations must embed UnimplementedServiceOneServer
// for forward compatibility.
type ServiceOneServer interface {
	PublishMessage(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedServiceOneServer()
}

// UnimplementedServiceOneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceOneServer struct{}

func (UnimplementedServiceOneServer) PublishMessage(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedServiceOneServer) mustEmbedUnimplementedServiceOneServer() {}
func (UnimplementedServiceOneServer) testEmbeddedByValue()                    {}

// UnsafeServiceOneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceOneServer will
// result in compilation errors.
type UnsafeServiceOneServer interface {
	mustEmbedUnimplementedServiceOneServer()
}

func RegisterServiceOneServer(s grpc.ServiceRegistrar, srv ServiceOneServer) {
	// If the following call pancis, it indicates UnimplementedServiceOneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceOne_ServiceDesc, srv)
}

func _ServiceOne_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceOneServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceOne_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceOneServer).PublishMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceOne_ServiceDesc is the grpc.ServiceDesc for ServiceOne service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceOne_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceOne",
	HandlerType: (*ServiceOneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _ServiceOne_PublishMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	ServiceTwo_GetResponse_FullMethodName = "/service.ServiceTwo/GetResponse"
)

// ServiceTwoClient is the client API for ServiceTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTwoClient interface {
	GetResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type serviceTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTwoClient(cc grpc.ClientConnInterface) ServiceTwoClient {
	return &serviceTwoClient{cc}
}

func (c *serviceTwoClient) GetResponse(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceTwo_GetResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTwoServer is the server API for ServiceTwo service.
// All implementations must embed UnimplementedServiceTwoServer
// for forward compatibility.
type ServiceTwoServer interface {
	GetResponse(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedServiceTwoServer()
}

// UnimplementedServiceTwoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceTwoServer struct{}

func (UnimplementedServiceTwoServer) GetResponse(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponse not implemented")
}
func (UnimplementedServiceTwoServer) mustEmbedUnimplementedServiceTwoServer() {}
func (UnimplementedServiceTwoServer) testEmbeddedByValue()                    {}

// UnsafeServiceTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTwoServer will
// result in compilation errors.
type UnsafeServiceTwoServer interface {
	mustEmbedUnimplementedServiceTwoServer()
}

func RegisterServiceTwoServer(s grpc.ServiceRegistrar, srv ServiceTwoServer) {
	// If the following call pancis, it indicates UnimplementedServiceTwoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceTwo_ServiceDesc, srv)
}

func _ServiceTwo_GetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTwoServer).GetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTwo_GetResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTwoServer).GetResponse(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTwo_ServiceDesc is the grpc.ServiceDesc for ServiceTwo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTwo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceTwo",
	HandlerType: (*ServiceTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResponse",
			Handler:    _ServiceTwo_GetResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
